/**
 * @Author fengyuhui
 * @create 2019-08-14 16:56
 */
public class Note {
    /**
     * wy
     * springMVC工作流
     * 输入一个URL之后发生了什么
     * Lock的底层：CAS和AQS
     * 类加载机制
     *
     * 为什么父类加载器和子类加载器的范围不一样：
     * 使用双亲委托模型好处有以下几点：
     *
     * 可以避免java类的重复加载，当父类加载器已经加载了，那么子加载器就没有必要重新加载一遍。而java类的双亲委托模型的搜索过程总比类加载器再加载一次耗时少，节省资源把。
     *
     *
     * 可以避免用户自定义同路径类对于J2SE平台自己定义的核心API的破坏。
     * 例如java.lang.Object类，它存放在rt.jar包中，无论哪一个类加载器需要加载这个类，最终都是委派给处于最顶端的启动类加载器(Bootstrap ClassLoader)进行加载，因此，Object类在所有程序各种类加载器环境中（也相当于类加载器命名空间中）都是同一个类（没办法，因为引导类加载器是JVM启动自带首先启动的，是第一次加载所有基础类库的类加载器）。
     * 相反，若是不使用双亲委托机制，由各个类加载器去自行加载的话，如果用户自定义了一个java.lang.Object类，放在Classpath中，那么系统将会出现多个不同的Object类，导致java类型体系中最基础的行为也就无法保证正常运行。双亲委托模型保证了java程序运行的稳定。
     *
     *
     * 基于JVM标识每个类的唯一性需要与类加载器一同来判断，那么，通过我们自定义的类加载器加载的类，就能很灵活和方便的与其他甚至同名的类区分开来，进行隔离使用。大大增强了我们对类的使用。
     * thrift底层，如何通信
     *
     *
     * 线程池 定时是如何定时的
     *
     */
}
